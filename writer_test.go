package huffman

import (
	"bytes"
	"crypto/rand"
	"io"
	"testing"
)

func FuzzWriterWrite(f *testing.F) {
	f.Add([]byte{})
	f.Add([]byte("hello"))
	f.Add([]byte("1234567890"))
	f.Add([]byte("1234567890abcdef"))
	f.Add([]byte("1234567890abcdef1234567890abcdef"))
	f.Add([]byte("1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"))
	f.Add([]byte("cfgvlhböjnhavUBÖObv)öob"))
	f.Add([]byte{
		0x42, 0x05, 0xbf, 0x18, 0x05, 0x33, 0x36, 0x35, 0x39, 0x37, 0x20, 0xe2, 0x9a, 0x91,
		0x20, 0x7c, 0x20, 0x30, 0x35, 0x3a, 0x32, 0x36, 0x20, 0xe2, 0x97, 0xb7, 0x00, 0x47,
		0x65, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x20, 0x62, 0x79, 0x20, 0x54, 0x68, 0x65, 0x6d,
		0x69, 0x78, 0x20, 0x7c, 0x20, 0x34, 0x2f, 0x35, 0x20, 0xe2, 0x98, 0x85, 0x00, 0x35,
		0x31, 0x37, 0x38, 0x36, 0x20, 0xe2, 0x9a, 0x91, 0x20, 0x7c, 0x20, 0x32, 0x36, 0x3a,
		0x33, 0x31, 0x20, 0xe2, 0x97, 0xb7, 0x00, 0x47, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x41,
		0x20, 0x62, 0x79, 0x20, 0x45, 0x76, 0x6f, 0x6c, 0x69, 0x20, 0x7c, 0x20, 0x33, 0x2f,
		0x35, 0x20, 0xe2, 0x98, 0x85, 0x00, 0x33, 0x30, 0x39, 0x32, 0x31, 0x20, 0xe2, 0x9a,
		0x91, 0x20, 0x7c, 0x20, 0x32, 0x35, 0x3a, 0x30, 0x32, 0x20, 0xe2, 0x97, 0xb7, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x16, 0x0d, 0xba,
		0xf6, 0xdf, 0x0a, 0xbb, 0xf6, 0xdf, 0x0a, 0x02, 0x00, 0xa5, 0x95, 0xfc, 0xac, 0x07,
		0x84, 0x0e, 0x00, 0xad, 0x02, 0x00, 0x00, 0xbf, 0xff, 0x03, 0x04, 0xd5, 0xd6, 0x90,
		0xcc, 0x0d, 0xd5, 0xbc, 0xb6, 0xd8, 0x04, 0xcf, 0xd4, 0x83, 0xe7, 0x0a, 0x85, 0xa5,
		0xcd, 0xe8, 0x06, 0x00, 0xbe, 0xff, 0x03, 0x04, 0x8d, 0xce, 0xd4, 0xac, 0x04, 0xab,
		0xf8, 0x81, 0xb8, 0x02, 0xea, 0xb6, 0xa1, 0x98, 0x0c, 0xee, 0x87, 0xca, 0x95, 0x0e,
		0x00, 0xbd, 0xff, 0x03, 0x04, 0x9b, 0x95, 0xf2, 0xec, 0x0e, 0xf7, 0x96, 0xa6, 0x61,
		0xf4, 0xfe, 0xc0, 0xa2, 0x0a, 0xe3, 0xee, 0x97, 0xbe, 0x0d, 0x00, 0xbc, 0xff, 0x03,
		0x04, 0x8e, 0xef, 0x87, 0xd5, 0x0c, 0xce, 0x93, 0xc6, 0xce, 0x01, 0xcc, 0xb5, 0x89,
		0x80, 0x0e, 0x8e, 0xd0, 0xd5, 0xf3, 0x0f, 0x00, 0xbb, 0xff, 0x03, 0x04, 0xa2, 0xa2,
		0xf3, 0x9d, 0x05, 0xb8, 0xc6, 0xc1, 0x92, 0x0d, 0xcf, 0xf7, 0xfa, 0xc9, 0x0f, 0x8f,
		0x91, 0xec, 0xe0, 0x0f, 0x00, 0xba, 0xff, 0x03, 0x04, 0xee, 0xd6, 0x8d, 0xda, 0x02,
		0x84, 0xda, 0xd9, 0x8f, 0x0b, 0xed, 0xfc, 0xd8, 0x91, 0x0d, 0xa5, 0xa9, 0xa6, 0xff,
		0x0c, 0x00, 0xb9, 0xff, 0x03, 0x04, 0xd6, 0xe6, 0xd0, 0xbe, 0x02, 0xd8, 0xb2, 0xf6,
		0x9e, 0x06, 0xf1, 0x9b, 0x8a, 0x97, 0x0a, 0x95, 0xe7, 0xbd, 0xb2, 0x0b, 0x00, 0xb8,
		0xff, 0x03, 0x04, 0xb9, 0xa4, 0xfc, 0x8b, 0x0d, 0xc7, 0x9e, 0xd6, 0x8a, 0x02, 0xed,
		0xb2, 0xef, 0xf7, 0x0d, 0x97, 0x96, 0x85, 0xeb, 0x0f, 0x00, 0xb7, 0xff, 0x03, 0x04,
		0x9c, 0xe1, 0xed, 0xe6, 0x01, 0xaf, 0xe1, 0x89, 0xb6, 0x05, 0xef, 0xbc, 0xe9, 0xc0,
		0x08, 0xb2, 0xc9, 0xdc, 0xf1, 0x08, 0xbf, 0xff, 0x03, 0x00, 0x03, 0xb3, 0xb0, 0xbf,
		0xec, 0x01, 0x09, 0x80, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0xa0,
		0xa9, 0x1b, 0x02, 0x04, 0x0b, 0x00, 0x00, 0xb0, 0x84, 0x53, 0x00, 0xbe, 0xff, 0x03,
		0x00, 0x02, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x94, 0xc6, 0x50, 0x00, 0xbe, 0xff, 0x03,
		0x01, 0x02, 0x00, 0x00, 0x17, 0x01, 0x01, 0x8f, 0xcf, 0xdc, 0x0a, 0x0b, 0x02, 0x00,
		0xb4, 0xac, 0x38, 0x00, 0xbe, 0xff, 0x03, 0x02, 0x02, 0x00, 0x00, 0x0b, 0x03, 0x00,
		0xa4, 0xd8, 0x5b, 0x00, 0xbe, 0xff, 0x03, 0x03, 0x02, 0x00, 0x00, 0x17, 0x03, 0x01,
		0x84, 0xa1, 0xdf, 0x0a, 0x0b, 0x04, 0x00, 0x94, 0x94, 0x3c, 0x00, 0xbe, 0xff, 0x03,
		0x04, 0x02, 0x01, 0x00, 0x0b, 0x05, 0x00, 0xb8, 0x94, 0x9d, 0x01, 0x00, 0xbe, 0xff,
		0x03, 0x05, 0x02, 0x00, 0x00, 0x17, 0x05, 0x01, 0x96, 0x87, 0xd8, 0x0a, 0x0b, 0x06,
		0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x06, 0x02, 0x00, 0x00, 0x17, 0x06, 0x01, 0xa6,
		0xd1, 0xdf, 0x0a, 0x0b, 0x07, 0x00, 0xb0, 0xcd, 0xa2, 0x01, 0x00, 0xbe, 0xff, 0x03,
		0x07, 0x02, 0x00, 0x00, 0x0b, 0x08, 0x00, 0x80, 0xa2, 0x75, 0x00, 0xbe, 0xff, 0x03,
		0x08, 0x02, 0x00, 0x00, 0x17, 0x08, 0x01, 0xa0, 0x8e, 0xdf, 0x0a, 0x0b, 0x09, 0x00,
		0x94, 0x92, 0x4a, 0x00, 0xbe, 0xff, 0x03, 0x09, 0x02, 0x00, 0x00, 0x17, 0x09, 0x01,
		0xaa, 0xce, 0xdf, 0x0a, 0x0b, 0x0a, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x0a, 0x02,
		0x00, 0x00, 0x17, 0x0a, 0x01, 0xb6, 0xce, 0xca, 0x0a, 0x0b, 0x0b, 0x00, 0x80, 0xe2,
		0x4a, 0x00, 0xbe, 0xff, 0x03, 0x0b, 0x02, 0x00, 0x00, 0x17, 0x0b, 0x01, 0x91, 0x98,
		0xdd, 0x0a, 0x0b, 0x0c, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x0c, 0x02, 0x01, 0x00,
		0x17, 0x0c, 0x01, 0x9b, 0xe4, 0xda, 0x0a, 0x0b, 0x0d, 0x00, 0xb4, 0xf3, 0x36, 0x00,
		0xbe, 0xff, 0x03, 0x0d, 0x02, 0x00, 0x00, 0x17, 0x0d, 0x01, 0xb5, 0xdb, 0xdf, 0x0a,
		0x0b, 0x0e, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x0e, 0x02, 0x00, 0x00, 0x17, 0x0e,
		0x01, 0x84, 0xa9, 0xdd, 0x0a, 0x0b, 0x0f, 0x00, 0x84, 0x9a, 0xbf, 0x01, 0x00, 0xbe,
		0xff, 0x03, 0x0f, 0x02, 0x00, 0x00, 0x0b, 0x10, 0x00, 0x98, 0x9c, 0x7a, 0x00, 0xbe,
		0xff, 0x03, 0x10, 0x02, 0x00, 0x00, 0x17, 0x10, 0x01, 0x9a, 0xa6, 0xdb, 0x0a, 0x0b,
		0x11, 0x00, 0xb8, 0xb7, 0x52, 0x00, 0xbe, 0xff, 0x03, 0x11, 0x02, 0x00, 0x00, 0x17,
		0x11, 0x01, 0xbe, 0x9e, 0xdf, 0x0a, 0x0b, 0x12, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03,
		0x12, 0x02, 0x01, 0x00, 0x0b, 0x13, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x13, 0x02,
		0x00, 0x00, 0x17, 0x13, 0x01, 0xb7, 0xcc, 0xdf, 0x0a, 0x0b, 0x14, 0x00, 0x40, 0x00,
		0xbe, 0xff, 0x03, 0x14, 0x02, 0x00, 0x00, 0x0b, 0x15, 0x00, 0xbc, 0x8a, 0xc5, 0x02,
		0x00, 0xbe, 0xff, 0x03, 0x15, 0x02, 0x00, 0x00, 0x17, 0x15, 0x01, 0x80, 0xb2, 0xdd,
		0x0a, 0x0b, 0x16, 0x00, 0x9c, 0x92, 0x28, 0x00, 0xbe, 0xff, 0x03, 0x16, 0x02, 0x00,
		0x00, 0x17, 0x16, 0x01, 0x89, 0x87, 0xde, 0x0a, 0x0b, 0x17, 0x00, 0xac, 0xdf, 0x3a,
		0x00, 0xbe, 0xff, 0x03, 0x17, 0x02, 0x00, 0x00, 0x17, 0x17, 0x01, 0xa0, 0xf4, 0xdd,
		0x0a, 0x0b, 0x18, 0x00, 0x88, 0x8b, 0x45, 0x00, 0xbe, 0xff, 0x03, 0x18, 0x02, 0x01,
		0x00, 0x0b, 0x19, 0x00, 0x94, 0x95, 0x94, 0x01, 0x00, 0xbe, 0xff, 0x03, 0x19, 0x02,
		0x00, 0x00, 0x17, 0x19, 0x01, 0xa4, 0xc6, 0xdf, 0x0a, 0x0b, 0x1a, 0x00, 0x40, 0x00,
		0xbe, 0xff, 0x03, 0x1a, 0x02, 0x00, 0x00, 0x17, 0x1a, 0x01, 0x9f, 0x8d, 0xdc, 0x0a,
		0x0b, 0x1b, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x1b, 0x02, 0x00, 0x00, 0x17, 0x1b,
		0x01, 0x98, 0xff, 0xdd, 0x0a, 0x0b, 0x1c, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x1c,
		0x02, 0x00, 0x00, 0x17, 0x1c, 0x01, 0xba, 0xfb, 0xda, 0x0a, 0x0b, 0x1d, 0x00, 0x40,
		0x00, 0xbe, 0xff, 0x03, 0x1d, 0x02, 0x00, 0x00, 0x17, 0x1d, 0x01, 0xaa, 0xce, 0xdf,
		0x0a, 0x0b, 0x1e, 0x00, 0x88, 0x8e, 0x3f, 0x00, 0xbe, 0xff, 0x03, 0x1e, 0x02, 0x00,
		0x00, 0x17, 0x1e, 0x01, 0xb2, 0xce, 0xdf, 0x0a, 0x0b, 0x1f, 0x00, 0xa4, 0xad, 0x34,
		0x00, 0xbe, 0xff, 0x03, 0x1f, 0x02, 0x01, 0x00, 0x17, 0x1f, 0x01, 0x9d, 0x9c, 0xdb,
		0x0a, 0x0b, 0x20, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03, 0x20, 0x02, 0x00, 0x00, 0x17,
		0x20, 0x01, 0x86, 0xd8, 0xda, 0x0a, 0x0b, 0x21, 0x00, 0x40, 0x00, 0xbe, 0xff, 0x03,
		0x21, 0x02, 0x01, 0x00, 0x0b, 0x22, 0x00, 0x88, 0xf0, 0x9d, 0x01, 0x00, 0xbe, 0xff,
		0x03, 0x22, 0x02, 0x00, 0x00, 0x17,
	})

	f.Fuzz(func(t *testing.T, data []byte) {
		testWriteAndCompareWithCompress(t, data)
	})
}

func testWriteAndCompareWithCompress(t *testing.T, data []byte) {

	var (
		huff             = NewHuffman()
		inputStream      = bytes.NewReader(data)
		compressedStream = bytes.NewBuffer(make([]byte, 0, len(data)))
		w                = NewWriter(compressedStream)
	)

	n, err := io.CopyBuffer(w, inputStream, make([]byte, 1)) // we want to test with a small buffer explicitly
	if err != nil {
		t.Fatalf("error writing: %v", err)
	}

	if n != int64(len(data)) {
		t.Fatalf("expected to write %d bytes, wrote %d", len(data), n)
	}

	compressed, err := huff.Compress(data)
	if err != nil {
		t.Fatalf("error compressing: %v", err)
	}

	if !bytes.Equal(compressed, compressedStream.Bytes()) {
		t.Fatalf("expected %v(%s), got %v(%s)", compressed, string(compressed), compressedStream.Bytes(), compressedStream.String())
	}
}

func BenchmarkCompression(b *testing.B) {
	huff := NewHuffman()

	_, data := generateBenchmarkData(10000)

	// has allocations but takes half as long compared to Write
	b.Run("compress", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			huff.Compress(data[i%len(data)])
		}
	})

	// no allocations but needs about twice as long per operation compared to compress
	buf := bytes.NewBuffer(make([]byte, 0, 1500))
	writer := NewWriterDict(NewDictionary(), buf)

	b.Run("write", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			writer.Write(data[i%len(data)])
			buf.Reset()
		}
	})
	/*
		Output:
			BenchmarkCompression
			BenchmarkCompression/compress
			BenchmarkCompression/compress-12         	   10000	    463228 ns/op	   64320 B/op	      16 allocs/op
			BenchmarkCompression/write
			BenchmarkCompression/write-12            	   10000	    669219 ns/op	      19 B/op	       0 allocs/op
	*/
}

func generateBenchmarkData(n int) (int, [][]byte) {
	var data [][]byte = make([][]byte, 0, n)
	total := 0
	for i := 0; i < n; i++ {
		testCase := make([]byte, int(1+float64(i)+float64(i)*1.2))
		_, err := rand.Read(testCase)
		if err != nil {
			panic(err)
		}
		total += len(testCase)
		data = append(data, testCase)
	}
	return total, data
}
